@using DataCore.Entities;
@using Newtonsoft.Json
@model DataCore.Entities.Order


@{
    string grid = "grd_" + Guid.NewGuid().ToString("N");
    string toolbar = "tlbr_" + Guid.NewGuid().ToString("N");
    string saveButton = "btn_" + Guid.NewGuid().ToString("N");
    string cancelButton = "btn_" + Guid.NewGuid().ToString("N");
    string wrap = "wrp_" + Guid.NewGuid().ToString("N");
    string editProductWindow = "wnd_" + Guid.NewGuid().ToString("N");
}


<div id="@wrap" class="edit-container">
    <div class="navbar navbar-light bg-light justify-content-end">

        <div class="">
            <button id="@saveButton" class="btn btn-success">Сохранить</button>
            <button id="@cancelButton" class="btn btn-info">Отмена</button>
        </div>


    </div>
    <div class="row">
        <div class="col-md-4">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="DeliveryType" class="control-label"></label>
                <select asp-items="Html.GetEnumSelectList<DeliveryType>()" data-bind="value: DeliveryType" class="form-control"></select>
                <span asp-validation-for="DeliveryType" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DeliveryTime" class="control-label"></label>
                <select asp-items="Html.GetEnumSelectList<DeliveryTime>()" data-bind="value: DeliveryTime" class="form-control"></select>
                <span asp-validation-for="DeliveryTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                <input class="form-control" data-bind="value: Address" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input class="form-control" data-bind="value: Phone" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Comment" class="control-label"></label>
                <input class="form-control" data-bind="value: Comment" />
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Change" class="control-label"></label>
                <input class="form-control" data-bind="value: Change" />
                <span asp-validation-for="Change" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PersonCount" class="control-label"></label>
                <input class="form-control" data-bind="value: PersonCount" />
                <span asp-validation-for="PersonCount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UserName" class="control-label"></label>
                <input class="form-control" data-bind="value: UserName" />
                <span asp-validation-for="UserName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="State" class="control-label"></label>
                <select asp-items="Html.GetEnumSelectList<OrderState>()" data-bind="value: State" class="form-control"></select>
                <span asp-validation-for="State" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TotalAmount" class="control-label"></label>
                <label>: <b>@Model.TotalAmount руб</b></label>
            </div>
            <div class="form-group">
                <label asp-for="Date" class="control-label"></label>
                <label>: <b>@Model.Date</b></label>
            </div>
        </div>

        <div class="col-md-8">

            <div class="form-group">
                <label class="control-label">Позиции заказа</label>
                <div id="@toolbar"></div>
                <div id="@grid">

                </div>
            </div>

        </div>
    </div>
    <div id="@editProductWindow"></div>
</div>


<script>

    kendo.culture("ru-RU");

    var $grid = $('#@grid');
    var $toolbar = $('#@toolbar');
    var $saveButton = $('#@saveButton');
    var $kendoWindow = $('#@editProductWindow');
    var contentUrl = "@Url.Action("OrderItemEdit", new { parent = wrap })";
    var windowOptions = {
        content: contentUrl,
        width: "700",
        height: "500",
        modal: true,
    }


    $(function() {

        var model = new kendo.observable(@Html.Raw(Json.Serialize(Model, new JsonSerializerSettings() {ReferenceLoopHandling = ReferenceLoopHandling.Ignore})));
        var closeModal = function () { $('#@editProductWindow').data('kendoWindow').close(); }

        var form = {
            model: model,
            closeModal: closeModal,
            selectedRow: null,
            op: ""
        };

      

        window['@wrap'] = form;

        kendo.bind($('#@wrap'), form.model);


        var addRow = function () {
            form.op = "create";
            form.selectedRow = null;
            var kendoWindow = $kendoWindow.kendoWindow(windowOptions);
            kendoWindow.data('kendoWindow').center().open();
        };

        var editRow = function () {            
            var grid = $('#@grid').data('kendoGrid');
            var row = grid.dataItem(grid.select());
            if (row) {
                form.op = "edit";
                form.selectedRow = row;
                var kendoWindow = $kendoWindow.kendoWindow(windowOptions);
                kendoWindow.data('kendoWindow').center().open();
            }
        };

        var deleteRow = function() {
            var grid = $('#@grid').data('kendoGrid');
            var row = grid.dataItem(grid.select());
            
            if (row) {
                model.Products.remove(row);
            }
        };


      

        $grid.kendoGrid({
            dataSource: {
                data: model.Products
            },
            selectable: "single,row",
            filterable: true,
            sortable: true,
            columns: [
                {
                    field: "Product.Title",
                    title: "Продукт",
                },
                {
                    field: "Count",
                    title: "Количество"
                },
                {
                    field: "Product.Price",
                    title: "Цена"
                }
            ]
        });
        $toolbar.kendoToolBar({
            items: [
                {
                    type: "button",
                    text: "Добавить",
                    icon: "plus",
                    click: addRow
                },
                {
                    type: "button",
                    text: "Изменить",
                    icon: "pencil",
                    click: editRow
                },
                {
                    type: "button",
                    text: "Удалить",
                    icon: "delete",
                    click: deleteRow
                }
            ]
        });
        $saveButton.on('click', function() {
            var url = "@Url.Action("Update")";
            var callback = function() {

            }

            $.ajax({
                url: url,
                type: "POST",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: callback
            });
        });


    });

</script>